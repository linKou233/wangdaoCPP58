产生信号的事件源主要包括：

用户交互：如用户按下中断键（通常是 Ctrl+C）会产生 SIGINT 信号。
硬件异常：如除零操作或访问无效内存时会产生 SIGFPE 或 SIGSEGV 信号。
软件条件：如定时器到期会产生 SIGALRM 信号。
系统调用：如 kill 或 raise 函数可以发送信号。
命令行工具：如 kill 命令可以向进程发送信号

SIGINT（信号编号 2）：中断信号。默认行为是终止进程。
SIGQUIT（信号编号 3）：退出信号。默认行为是终止进程并生成核心转储。
SIGKILL（信号编号 9）：杀死信号。默认行为是立即终止进程，不能被捕获或忽略。
SIGSEGV（信号编号 11）：段错误信号。默认行为是终止进程并生成核心转储。
SIGPIPE（信号编号 13）：管道破裂信号。默认行为是终止进程。
SIGALRM（信号编号 14）：闹钟信号。默认行为是终止进程。
SIGTERM（信号编号 15）：终止信号。默认行为是终止进程，但可以被捕获或忽略。
SIGCHLD（信号编号 17）：子进程状态改变信号。默认行为是忽略。
SIGCONT（信号编号 18）：继续执行暂停的进程。默认行为是继续执行被停止的进程。
SIGSTOP（信号编号 19）：停止执行信号。默认行为是停止进程，不能被捕获或忽略。
SIGTSTP（信号编号 20）：终端停止信号。默认行为是停止进程。

a 线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一个进程可以包含一个或多个线程，每个线程都共享进程中的资源，如内存和文件句柄，但每个线程有自己的程序计数器、寄存器集和栈。

b 引入线程的原因主要有以下几点：

资源共享：线程间自然地共享进程资源，这使得线程间的数据交换和通信更加方便。
效率：创建和管理线程的开销小于进程，因为线程比进程更轻量级。
响应性：多线程程序在一个线程等待某个事件完成时，其他线程可以继续执行，从而提高程序的响应性。
利用多核处理器：多线程可以充分利用多核处理器的计算能力，通过并行执行提高程序的整体性能。

